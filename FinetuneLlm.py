# -*- coding: utf-8 -*-
"""FinetuningTest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v6Rddk7PGXGyENewx5thgjY_bKgImTOw
"""

# ✅ 1. Install required libraries
!pip install -q transformers datasets peft accelerate

# ✅ 2. Import everything
from transformers import AutoModelForCausalLM, AutoTokenizer, TrainingArguments, Trainer, DataCollatorForLanguageModeling
from datasets import load_dataset
from peft import get_peft_model, LoraConfig, TaskType
import torch

# ✅ 3. Load a small base model (Tiny GPT-2)
model_id = "sshleifer/tiny-gpt2"

model = AutoModelForCausalLM.from_pretrained(model_id)
tokenizer = AutoTokenizer.from_pretrained(model_id)

# Add a padding token to the tokenizer if it doesn't have one.
# Tiny GPT-2 tokenizer doesn't have a default pad token, so we use the eos_token.
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ✅ 4. Apply LoRA config
lora_config = LoraConfig(
    r=4,
    lora_alpha=16,
    target_modules=["c_attn"],  # GPT-2's attention layer
    lora_dropout=0.05,
    bias="none",
    task_type=TaskType.CAUSAL_LM,
)

model = get_peft_model(model, lora_config)

pip install --upgrade datasets fsspec

# ✅ 5. Load a tiny dataset
dataset = load_dataset("wikitext", "wikitext-2-raw-v1", split="train[:1%]")

# ✅ 6. Tokenize the dataset
def tokenize_function(examples):
    return tokenizer(examples["text"], truncation=True, padding="max_length", max_length=128)

tokenized_dataset = dataset.map(tokenize_function, batched=True)

# ✅ 7. Prepare training arguments
training_args = TrainingArguments(
    output_dir="./tiny-gpt2-lora",
    per_device_train_batch_size=4,
    num_train_epochs=1,
    logging_steps=10,
    save_steps=50,
    save_total_limit=1,
    fp16=torch.cuda.is_available(),
    push_to_hub=False,
)

# ✅ 8. Data collator
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)

# ✅ 9. Trainer setup
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

# ✅ 10. Start training
trainer.train()

model.save_pretrained("fine_tuned_model")
tokenizer.save_pretrained("fine_tuned_model")

from transformers import AutoModelForCausalLM, AutoTokenizer

model = AutoModelForCausalLM.from_pretrained("fine_tuned_model")
tokenizer = AutoTokenizer.from_pretrained("fine_tuned_model")



from peft import PeftModel
base_model = AutoModelForCausalLM.from_pretrained("sshleifer/tiny-gpt2")

input_text = "Machine learning and AI is transforming industries by"
inputs = tokenizer(input_text, return_tensors="pt")

# Generate with some max tokens
outputs = model.generate(
    **inputs,
    max_new_tokens=50,
    do_sample=True,        # enable sampling to add randomness
    top_p=0.9,             # nucleus sampling parameter
    temperature=0.8        # control creativity: lower is conservative, higher is creative
)

generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
print(generated_text)

